# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt 5.15.2
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        dir: '${{ runner.temp }}/qt'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # Use a very short build dir to minimize path length (especially on Windows)
        echo "build-output-dir=${{ runner.temp }}/b" >> "$GITHUB_OUTPUT"

    - name: Debug Qt installation
      shell: bash
      run: |
        echo "QT_DIR environment variable: $QT_DIR"
        echo "QT_ROOT_DIR environment variable: $QT_ROOT_DIR"
        echo "Contents of Qt directory:"
        ls -la "${{ runner.temp }}/qt" || echo "Qt directory not found"
        echo "Looking for Qt5Config.cmake files:"
        find "${{ runner.temp }}/qt" -name "Qt5Config.cmake" 2>/dev/null || echo "No Qt5Config.cmake found"

    - name: Configure CMake
      # Configure CMake using a short build directory and enable path hashing to avoid long object file paths.
      run: >
        cmake
        -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OBJECT_PATH_MAX=240
        -DCMAKE_INSTALL_PREFIX="${{ runner.temp }}/i"
        -DQt5_DIR="${{ env.QT_DIR }}"
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

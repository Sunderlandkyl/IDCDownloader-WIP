# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-2022, ubuntu-latest, macos-15-intel]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: macos-15-intel
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
        # Exclude invalid combinations of OS and compiler
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-15-intel
            c_compiler: cl

    steps:
    - uses: actions/checkout@v5

    - name: Set up CMake
      if: runner.os == 'macOS'
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.27.7'
    
    - name: Create test file
      run: echo "Testing CMake multi-platform workflow" > testfile-${{ matrix.os }}-${{ matrix.build_type }}.txt

    - name: Upload Release Asset Test
      if: startsWith(github.event_name, 'release')
      uses: softprops/action-gh-release@v1
      with:
        files: testfile.txt

    # ----- Qt installation -----
    # Windows/Linux: keep install-qt-action
    - name: Install Qt 5.15.2 (Windows/Linux)
      if: runner.os != 'macOS'
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        modules: 'qtwebengine'
        dir: '${{ runner.temp }}/qt'
        # Optionally add tools if you need them:
        # tools: 'tools_qttools'

    - name: Show available macOS SDKs
      if: runner.os == 'macOS'
      run: |
        echo "Available SDKs (xcodebuild):"
        xcodebuild -showsdks
        echo "Default sysroot path (xcrun):"
        xcrun --sdk macosx --show-sdk-path

    - name: Install Qt 5.15.8 (macOS)
      if: runner.os == 'macOS'
      env:
        # Keep all paths short to avoid overflowing Mach-O headers
        QT_PREFIX: ${{ runner.temp }}/qt-5158
        # Make sure anything linked during the script gets extra header space,
        # so install_name_tool/rpath edits won't overflow later.
        LDFLAGS: -Wl,-headerpad_max_install_names
        # Match the SDK/deployment target you pass to the script
        MACOSX_DEPLOYMENT_TARGET: "15.5"
      run: |
        set -euxo pipefail

        # Stay in a short path
        cd "${{ runner.temp }}"

        # Use the active Xcode SDK explicitly
        export SDKROOT="$(xcrun --sdk macosx --show-sdk-path)"

        curl -s https://raw.githubusercontent.com/commontk/qt-easy-build/refs/heads/5.15.8/Build-qt.sh -o Build-qt.sh
        chmod +x Build-qt.sh

        # -y non-interactive, -j parallel, -d/-s set the macOS target/SDK, -q sets a short install prefix
        ./Build-qt.sh -y -j 4 -d 15.5 -s macosx15.5 -q "$QT_PREFIX"

        echo "Qt5_DIR=$QT_PREFIX/lib/cmake/Qt5" >> $GITHUB_ENV

        ls -la "$QT_PREFIX/lib/cmake/Qt5/"
        echo "Qt5 installation complete with qt-easy-build"


    # ----- String setup -----
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # Use a very short build dir to minimize path length (especially on Windows)
        echo "build-output-dir=${{ runner.temp }}/b" >> "$GITHUB_OUTPUT"

    # ----- Configure -----
    - name: Configure CMake
      run: >
        cmake
        -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OBJECT_PATH_MAX=240
        -DCMAKE_INSTALL_PREFIX="${{ runner.temp }}/i"
        -DCMAKE_CXX_MP_FLAGS=ON
        -DQt5_DIR="${{ env.Qt5_DIR }}/Qt5"
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --parallel 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}/Slicer-build" --config ${{ matrix.build_type }} --target package

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cmake-multi-platform-${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/Slicer-build/IDCDownloader-*
            
    - name: Upload Release Asset
      if: startsWith(github.event_name, 'release')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.strings.outputs.build-output-dir }}/Slicer-build/IDCDownloader-*
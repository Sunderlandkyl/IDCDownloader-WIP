# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt 5.15.2
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        modules: 'qtwebengine'
        dir: '${{ runner.temp }}/qt'

    - name: Install NSIS (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install NSIS
        Write-Host "Downloading NSIS installer..."
        $url = "https://sourceforge.net/projects/nsis/files/NSIS%203/3.09/nsis-3.09-setup.exe/download"
        Invoke-WebRequest -Uri $url -OutFile "nsis-setup.exe"
        Write-Host "Installing NSIS..."
        Start-Process -FilePath ".\nsis-setup.exe" -ArgumentList "/S" -Wait
        $nsisPath = "${env:ProgramFiles}\NSIS"
        if (Test-Path $nsisPath) {
          Write-Host "NSIS installed successfully at $nsisPath"
          echo "$nsisPath" >> $env:GITHUB_PATH
          echo "$nsisPath\Bin" >> $env:GITHUB_PATH
        } else {
          Write-Host "NSIS installation may have failed"
        }
      shell: pwsh

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # Use a very short build dir to minimize path length (especially on Windows)
        echo "build-output-dir=${{ runner.temp }}/b" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake using a short build directory and enable path hashing to avoid long object file paths.
      run: >
        cmake
        -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OBJECT_PATH_MAX=240
        -DCMAKE_INSTALL_PREFIX="${{ runner.temp }}/i"
        -DCMAKE_CXX_MP_FLAGS=ON
        -DQt5_DIR="${{ env.Qt5_DIR }}/Qt5"
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --parallel 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        # Build the PACKAGE target to create installer
        # On Slicer-based builds, this is typically in the Slicer-build subdirectory
        if [ -d "Slicer-build" ]; then
          cd Slicer-build
          cmake --build . --config ${{ matrix.build_type }} --target PACKAGE
        else
          # Fallback: try building PACKAGE target from main build directory
          cmake --build . --config ${{ matrix.build_type }} --target PACKAGE
        fi
      shell: bash

    - name: Find Package Files
      id: package-files
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        # Find the generated package files
        echo "Searching for package files in $(pwd)..."
        echo "Directory contents:"
        find . -maxdepth 3 -type f -name "*" | head -20
        
        PACKAGE_FILES=""
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Look for .exe installer files
          PACKAGE_FILES=$(find . -name "*.exe" -type f 2>/dev/null | grep -v "/CMake" | head -5 || true)
          EXTENSION="exe"
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # Look for .dmg files
          PACKAGE_FILES=$(find . -name "*.dmg" -type f 2>/dev/null | head -5 || true)
          EXTENSION="dmg"
        else
          # Linux - look for .deb, .rpm, .tar.gz files  
          PACKAGE_FILES=$(find . \( -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -type f 2>/dev/null | head -5 || true)
          EXTENSION="deb-rpm-tgz"
        fi
        
        echo "Found package files:"
        if [ -n "$PACKAGE_FILES" ]; then
          echo "$PACKAGE_FILES"
          # Convert to space-separated list for the action
          PACKAGE_LIST=$(echo "$PACKAGE_FILES" | tr '\n' ' ' | xargs)
          echo "package-files=$PACKAGE_LIST" >> $GITHUB_OUTPUT
          echo "has-packages=true" >> $GITHUB_OUTPUT
        else
          echo "No package files found"
          echo "package-files=" >> $GITHUB_OUTPUT  
          echo "has-packages=false" >> $GITHUB_OUTPUT
        fi
        echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Upload Package Artifacts
      if: steps.package-files.outputs.has-packages == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: IDCDownloader-${{ matrix.os }}-${{ matrix.build_type }}-installer
        path: ${{ steps.package-files.outputs.package-files }}
        retention-days: 30

# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-2022, macos-latest-large]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest-large
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest-large
            c_compiler: cl

    steps:
    - uses: actions/checkout@v5

    - name: Set up CMake
      if: runner.os == 'macOS'
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.27.7'

    # ----- Qt installation -----
    # Windows/Linux: keep install-qt-action
    - name: Install Qt 5.15.2 (Windows/Linux)
      if: runner.os != 'macOS'
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        modules: 'qtwebengine'
        dir: '${{ runner.temp }}/qt'
        # Optionally add tools if you need them:
        # tools: 'tools_qttools'
    # macOS: use Homebrew Qt (has OpenSSL/DTLS)
    - name: Install Qt 5 (macOS via Homebrew)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew update
        brew install qt@5 openssl@3
        # Put Qt tools on PATH
        echo "$(brew --prefix qt@5)/bin" >> "$GITHUB_PATH"
        # Help CMake find Qt5
        echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> "$GITHUB_ENV"
        echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> "$GITHUB_ENV"
        # Optional: show what we have
        qmake -v || true
        (command -v qtpaths && qtpaths --qt-version) || true

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # Use a very short build dir to minimize path length (especially on Windows)
        echo "build-output-dir=${{ runner.temp }}/b" >> "$GITHUB_OUTPUT"

    # ----- Configure -----
    - name: Configure CMake
      run: >
        cmake
        -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OBJECT_PATH_MAX=240
        -DCMAKE_INSTALL_PREFIX="${{ runner.temp }}/i"
        -DCMAKE_CXX_MP_FLAGS=ON
        -DQt5_DIR="${{ env.Qt5_DIR }}/Qt5"
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --parallel 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}/Slicer-build" --config ${{ matrix.build_type }} --target package

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cmake-multi-platform-${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/Slicer-build/IDCDownloader-*
